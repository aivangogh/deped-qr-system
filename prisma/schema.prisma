// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  participant
  speaker
  hrtd
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(participant)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ResetToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("resettokens")
}

model Training {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  trainingCode   String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  title          String
  dateFrom       DateTime
  dateTo         DateTime
  numberOfHours  Int?
  venue          String
  issuedOn       DateTime?
  issuedAt       String?
  validUntil     DateTime
  speaker        Speaker[]
  participant    Participant[]
  pap            Pap              @relation(fields: [papId], references: [papId])
  papId          String
  DateOfTraining DateOfTraining[]
}

model Pap {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  papId       String     @unique
  description String?
  pap         String
  Training    Training[]
}

model DateOfTraining {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  from       DateTime
  to         DateTime
  trainingId String   @db.ObjectId
  training   Training @relation(fields: [trainingId], references: [id])
}

model Speaker {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  speakerId  String    @unique @db.ObjectId
  name       String
  Training   Training? @relation(fields: [trainingId], references: [id])
  trainingId String?   @db.ObjectId
}

model Participant {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  participantId String    @unique @db.ObjectId
  name          String
  position      String
  school        String
  email         String
  phone         String
  Training      Training? @relation(fields: [trainingId], references: [id])
  trainingId    String?   @db.ObjectId
}
